trigger:
  branches:
    include:
      - main  # Trigger the pipeline on changes to the main branch

variables:
  azureServiceConnection: 'MyAzureServiceConnection'  # Service connection for Azure
  resourceGroupName: 'RG-Deployments'  # Resource group name
  appName: 'WebApp-RG-Deployments'  # Name of the Azure Web App
  appServicePlanName: 'ASP-RG-Deployments'  # Name of the App Service Plan
  location: 'westeurope'  # Azure region for deployment
  blueSlotName: 'blue'  # Deployment slot name: blue
  greenSlotName: 'green'  # Deployment slot name: green
  canarySlotName: 'canary'  # Deployment slot name: canary

jobs:
- job: CreateInfrastructure
  displayName: 'Create Resource Group and Web App'  # Display name for the infrastructure creation job
  pool:
    vmImage: 'ubuntu-latest'  # Use the latest Ubuntu VM image
  steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureServiceConnection)  # Azure service connection
        scriptType: 'bash'  # Script type: bash
        scriptLocation: 'inlineScript'  # Script location: inline script
        inlineScript: |
          echo "Creating Resource Group..."
          az group create --name $(resourceGroupName) --location $(location)  # Create the resource group

          echo "Creating App Service Plan..."
          az appservice plan create --name $(appServicePlanName) --resource-group $(resourceGroupName) --location $(location) --sku S1  # Create the App Service Plan

          echo "Creating Web App..."
          az webapp create --name $(appName) --resource-group $(resourceGroupName) --plan $(appServicePlanName)  # Create the Web App

          echo "Creating Deployment Slots..."
          az webapp deployment slot create --name $(appName) --resource-group $(resourceGroupName) --slot $(blueSlotName)  # Create the blue slot
          az webapp deployment slot create --name $(appName) --resource-group $(resourceGroupName) --slot $(greenSlotName)  # Create the green slot
          az webapp deployment slot create --name $(appName) --resource-group $(resourceGroupName) --slot $(canarySlotName)  # Create the canary slot
      displayName: 'Create RG, App Service Plan, Web App, and Slots'  # Display name for the step

- job: BuildWebsite1
  displayName: 'Build Website 1'  # Display name for the build website 1 job
  dependsOn: CreateInfrastructure  # This job depends on the infrastructure creation job
  pool:
    vmImage: 'ubuntu-latest'  # Use the latest Ubuntu VM image
  steps:
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'website1'  # Path to the website 1 source code
        artifactName: 'website1-drop'  # Name of the artifact
      displayName: 'Publish Website 1 Artifact'  # Display name for the step

- job: BuildWebsite2
  displayName: 'Build Website 2'  # Display name for the build website 2 job
  dependsOn: CreateInfrastructure  # This job depends on the infrastructure creation job
  pool:
    vmImage: 'ubuntu-latest'  # Use the latest Ubuntu VM image
  steps:
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'website2'  # Path to the website 2 source code
        artifactName: 'website2-drop'  # Name of the artifact
      displayName: 'Publish Website 2 Artifact'  # Display name for the step

- job: BuildWebsite3
  displayName: 'Build Website 3'  # Display name for the build website 3 job
  dependsOn: CreateInfrastructure  # This job depends on the infrastructure creation job
  pool:
    vmImage: 'ubuntu-latest'  # Use the latest Ubuntu VM image
  steps:
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'website3'  # Path to the website 3 source code
        artifactName: 'website3-drop'  # Name of the artifact
      displayName: 'Publish Website 3 Artifact'  # Display name for the step

- job: DeployWebsite1
  displayName: 'Deploy Website 1 to Blue Slot'  # Display name for the deploy website 1 job
  dependsOn: BuildWebsite1  # This job depends on the build website 1 job
  pool:
    vmImage: 'ubuntu-latest'  # Use the latest Ubuntu VM image
  steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'  # Download artifacts from the current build
        artifactName: 'website1-drop'  # Name of the artifact to download
        targetPath: '$(Pipeline.Workspace)/website1'  # Path to download the artifact to

    - task: AzureWebApp@1
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        appType: 'webApp'
        appName: '$(appName)'
        package: '$(Pipeline.Workspace)/website1'
        deploymentMethod: 'auto'

- job: DeployWebsite2
  displayName: 'Deploy Website 2 to Green Slot'  # Display name for the deploy website 2 job
  dependsOn: BuildWebsite2  # This job depends on the build website 2 job
  pool:
    vmImage: 'ubuntu-latest'  # Use the latest Ubuntu VM image
  steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'  # Download artifacts from the current build
        artifactName: 'website2-drop'  # Name of the artifact to download
        targetPath: '$(Pipeline.Workspace)/website2'  # Path to download the artifact to

    - task: AzureWebApp@1
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        appType: 'webApp'
        appName: '$(appName)'
        package: '$(Pipeline.Workspace)/website2'
        deploymentMethod: 'auto'

- job: DeployWebsite3
  displayName: 'Deploy Website 3 to Canary Slot'  # Display name for the deploy website 3 job
  dependsOn: BuildWebsite3  # This job depends on the build website 3 job
  pool:
    vmImage: 'ubuntu-latest'  # Use the latest Ubuntu VM image
  steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'  # Download artifacts from the current build
        artifactName: 'website3-drop'  # Name of the artifact to download
        targetPath: '$(Pipeline.Workspace)/website3'  # Path to download the artifact to

    - task: AzureWebApp@1
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        appType: 'webApp'
        appName: '$(appName)'
        package: '$(Pipeline.Workspace)/website3'
        deploymentMethod: 'auto'

- job: MonitorAndAudit
  displayName: 'Monitoring and Auditing'  # Display name for the monitoring and auditing job
  dependsOn: BuildWebsite3  # This job depends on the database migration job
  pool:
    vmImage: 'ubuntu-latest'  # Use the latest Ubuntu VM image
  steps:
    - script: echo "Setting up monitoring..."  # Echo setting up monitoring
    - script: |
        # Add your monitoring setup scripts here
        echo "Monitoring setup complete."
    - script: echo "Starting auditing..."  # Echo starting auditing
    - script: |
        # Add your auditing scripts here
        echo "Auditing complete."
      displayName: 'Setup Monitoring and Auditing'  # Setup monitoring and auditing scripts
