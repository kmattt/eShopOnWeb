trigger:
  branches:
    include:
      - main

variables:
  azureServiceConnection: 'MyAzureServiceConnection'
  resourceGroupName: 'RG-Deployments'
  appName: 'WebApp-RG-Deployments'
  appServicePlanName: 'ASP-RG-Deployments'
  location: 'westeurope'
  blueSlotName: 'blue'
  greenSlotName: 'green'
  canarySlotName: 'canary'

jobs:
- job: CreateInfrastructure
  displayName: 'Create Resource Group and Web App'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Creating Resource Group..."
          az group create --name $(resourceGroupName) --location $(location)
          
          echo "Creating App Service Plan..."
          az appservice plan create --name $(appServicePlanName) --resource-group $(resourceGroupName) --location $(location) --sku B1

          echo "Creating Web App..."
          az webapp create --name $(appName) --resource-group $(resourceGroupName) --plan $(appServicePlanName)

          echo "Creating Deployment Slots..."
          az webapp deployment slot create --name $(appName) --resource-group $(resourceGroupName) --slot $(blueSlotName)
          az webapp deployment slot create --name $(appName) --resource-group $(resourceGroupName) --slot $(greenSlotName)
          az webapp deployment slot create --name $(appName) --resource-group $(resourceGroupName) --slot $(canarySlotName)
      displayName: 'Create RG, App Service Plan, Web App, and Slots'

- job: BuildWebsite1
  displayName: 'Build Website 1'
  dependsOn: CreateInfrastructure
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'website1'
        artifactName: 'website1-drop'
      displayName: 'Publish Website 1 Artifact'

- job: BuildWebsite2
  displayName: 'Build Website 2'
  dependsOn: CreateInfrastructure
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'website2'
        artifactName: 'website2-drop'
      displayName: 'Publish Website 2 Artifact'

- job: BuildWebsite3
  displayName: 'Build Website 3'
  dependsOn: CreateInfrastructure
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'website3'
        artifactName: 'website3-drop'
      displayName: 'Publish Website 3 Artifact'

- job: DeployWebsite1
  displayName: 'Deploy Website 1 to Blue Slot'
  dependsOn: BuildWebsite1
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'website1-drop'
        targetPath: '$(Pipeline.Workspace)/website1'

    - task: AzureWebApp@1
      inputs:
        azureSubscription: $(azureServiceConnection)
        appName: $(appName)
        package: '$(Pipeline.Workspace)/website1'
        slotName: $(blueSlotName)

- job: DeployWebsite2
  displayName: 'Deploy Website 2 to Green Slot'
  dependsOn: BuildWebsite2
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'website2-drop'
        targetPath: '$(Pipeline.Workspace)/website2'

    - task: AzureWebApp@1
      inputs:
        azureSubscription: $(azureServiceConnection)
        appName: $(appName)
        package: '$(Pipeline.Workspace)/website2'
        slotName: $(greenSlotName)

- job: DeployWebsite3
  displayName: 'Deploy Website 3 to Canary Slot'
  dependsOn: BuildWebsite3
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'website3-drop'
        targetPath: '$(Pipeline.Workspace)/website3'

    - task: AzureWebApp@1
      inputs:
        azureSubscription: $(azureServiceConnection)
        appName: $(appName)
        package: '$(Pipeline.Workspace)/website3'
        slotName: $(canarySlotName)

- job: MigrateDatabase
  displayName: 'Database Schema Migration'
  dependsOn:
    - DeployWebsite1
    - DeployWebsite2
    - DeployWebsite3
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - script: |
        echo "Running database schema migration..."
        # Add your database migration scripts here
        # Example: flyway migrate or custom scripts
        # flyway -url=jdbc:mysql://your-database-url -user=your-db-user -password=your-db-password migrate
      displayName: 'Execute Database Migration'

- job: CanaryDeployment
  displayName: 'Canary Deployment'
  dependsOn: DeployWebsite3
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - script: echo "Starting canary deployment..."
    - script: echo "Running tests and monitoring..."
    - task: AzureWebApp@1
      inputs:
        azureSubscription: $(azureServiceConnection)
        appName: $(appName)
        slotName: $(canarySlotName)
        package: '$(Pipeline.Workspace)/website3'
      displayName: 'Deploy to Canary Slot and Monitor'

- job: SwapSlots
  displayName: 'Blue-Green Deployment Swap'
  dependsOn: CanaryDeployment
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az webapp deployment slot swap --resource-group $(resourceGroupName) --name $(appName) --slot $(blueSlotName) --target-slot $(greenSlotName)
      displayName: 'Swap Blue and Green Slots'

- job: MonitorAndAudit
  displayName: 'Monitoring and Auditing'
  dependsOn: SwapSlots
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - script: echo "Setting up monitoring..."
    - script: |
        # Add your monitoring setup scripts here
        echo "Monitoring setup complete."
    - script: echo "Starting auditing..."
    - script: |
        # Add your auditing scripts here
        echo "Auditing complete."
      displayName: 'Setup Monitoring and Auditing'
