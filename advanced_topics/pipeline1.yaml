trigger:
- main  # Trigger the pipeline on changes to the main branch

pool:
  vmImage: 'windows-latest'  # Use Microsoft-hosted agents with the latest Windows image

variables:
  # Cache key and paths
  NUGET_PACKAGES: '$(Pipeline.Workspace)/.nuget/packages'  # Define the path for NuGet packages cache

stages:
- stage: SetupAndBuild
  jobs:
  - job: SetupAndBuild
    displayName: 'Setup and Build Job'
    pool:
      vmImage: 'windows-latest'  # Use Microsoft-hosted agent
    workspace:
      clean: all  # Clean the workspace before starting the job
    steps:
    - checkout: self
      fetchDepth: 1  # Fetch only the latest commit to reduce checkout time
      persistCredentials: true  # Persist credentials for any future fetches
      lfs: false  # Do not fetch Git LFS objects
      submodules: false  # Do not fetch submodules

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.x'  # Specify the latest .NET 6 SDK version
        installationPath: $(Agent.ToolsDirectory)/dotnet  # Path where .NET SDK will be installed

    - script: |
        echo "Creating a new .NET console application project"
        dotnet new console -n MyProject
      displayName: 'Create .NET Project'

    - script: |
        echo "Listing files in the current directory"
        dir
      displayName: 'List Files in Current Directory'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          if (-not (Test-Path -Path $(NUGET_PACKAGES))) {
            New-Item -ItemType Directory -Path $(NUGET_PACKAGES)
          }
      displayName: 'Create NuGet Packages Directory'

    - task: Cache@2
      inputs:
        key: 'nuget | "$(Agent.OS)" | $(Build.SourcesDirectory)/nuget.config'
        path: $(NUGET_PACKAGES)  # Path to store cached packages
        cacheHitVar: 'PACKAGES_CACHE_RESTORED'  # Variable to check if the cache was restored
        restoreKeys: |
          nuget | "$(Agent.OS)"
          nuget  # Fallback keys if the main key is not found

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          if (-not $env:PACKAGES_CACHE_RESTORED) {
            dotnet restore --disable-parallel --packages $(NUGET_PACKAGES)  # Restore packages if cache not restored
          }
      displayName: 'Restore Packages'

    - script: |
        echo "Building the project"
        dotnet build MyProject/MyProject.csproj --no-restore --configuration Release
      displayName: 'Build Project'

    - publish: MyProject
      artifact: MyProjectArtifact
      displayName: 'Publish Project Artifact'

- stage: Test
  dependsOn: SetupAndBuild
  jobs:
  - job: Test
    displayName: 'Test Job'
    pool:
      vmImage: 'windows-latest'  # Use Microsoft-hosted agent
    workspace:
      clean: all  # Clean the workspace before starting the job
    steps:
    - download: current
      artifact: MyProjectArtifact
      displayName: 'Download Project Artifact'

    - script: |
        echo "Listing files in the current directory"
        dir
      displayName: 'List Files in Current Directory'

    - script: |
        echo "Listing files in the downloaded artifact directory"
        dir "$(Pipeline.Workspace)\MyProject"
      displayName: 'List Files in Downloaded Artifact Directory'

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.x'  # Specify the latest .NET 6 SDK version
        installationPath: $(Agent.ToolsDirectory)/dotnet  # Path where .NET SDK will be installed

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          if (-not (Test-Path -Path $(NUGET_PACKAGES))) {
            New-Item -ItemType Directory -Path $(NUGET_PACKAGES)
          }
      displayName: 'Create NuGet Packages Directory'

    - task: Cache@2
      inputs:
        key: 'nuget | "$(Agent.OS)" | $(Build.SourcesDirectory)/nuget.config'
        path: $(NUGET_PACKAGES)  # Path to store cached packages
        cacheHitVar: 'PACKAGES_CACHE_RESTORED'  # Variable to check if the cache was restored
        restoreKeys: |
          nuget | "$(Agent.OS)"
          nuget  # Fallback keys if the main key is not found

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          if (-not $env:PACKAGES_CACHE_RESTORED) {
            dotnet restore --disable-parallel --packages $(NUGET_PACKAGES)  # Restore packages if cache not restored
          }
      displayName: 'Restore Packages'

    - script: |
        echo "Running tests"
        dotnet test "$(Pipeline.Workspace)\MyProject\MyProject.csproj" --no-restore --configuration Release --collect:"XPlat Code Coverage"
      displayName: 'Run Tests'

- stage: Troubleshoot
  condition: failed()  # Run this stage only if the pipeline fails
  jobs:
  - job: Troubleshoot
    displayName: 'Troubleshooting Job'
    pool:
      vmImage: 'windows-latest'  # Use Microsoft-hosted agent
    steps:
    - script: echo "Gathering logs and troubleshooting information..."
      displayName: 'Troubleshoot Steps'
