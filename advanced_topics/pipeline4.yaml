trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureServiceConnection: 'MyAzureServiceConnection'
  resourceGroup: 'myResourceGroup'
  location: 'eastus'
  sqlServerName: 'mysqlserver213'
  sqlDatabaseName: 'mydatabase213'
  sqlAdminUser: 'sqladmin213'
  sqlAdminPassword: '12345Pass!'
  appServicePlan: 'asp-213a'
  appServiceName: 'app-service-213a'
  firewallRuleName: MyFWRule

stages:
- stage: InfrastructureSetup
  displayName: 'Setup Infrastructure'
  jobs:
  - job: CreateResources
    displayName: 'Create Azure Resources'
    steps:
    - task: AzureCLI@2
      displayName: 'Create Resource Group'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az group create --name $(resourceGroup) --location $(location)
    
    - task: AzureCLI@2
      displayName: 'Create SQL Server'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az sql server create --name $(sqlServerName) --resource-group $(resourceGroup) --location $(location) --admin-user $(sqlAdminUser) --admin-password $(sqlAdminPassword)

    - task: AzureCLI@2
      displayName: 'Create SQL Database'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az sql db create --resource-group $(resourceGroup) --server $(sqlServerName) --name $(sqlDatabaseName) --service-objective S0

- stage: DatabaseMigrations
  displayName: 'Perform Database Migrations'
  dependsOn: InfrastructureSetup
  jobs:
  - job: MigrateDatabase
    displayName: 'Run Database Migrations'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'MyAzureServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          MY_IP=$(curl -s http://ipinfo.io/json | jq -r '.ip')
          echo "My IP is $MY_IP"
          az sql server firewall-rule create --resource-group $(resourceGroup) --server $(sqlServerName) --name $(firewallRuleName) --start-ip-address $MY_IP --end-ip-address $MY_IP
      displayName: 'Add IP to SQL Server Firewall'

    - script: |
        wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/8.4.2/flyway-commandline-8.4.2-linux-x64.tar.gz | tar xvz
        sudo ln -s $(pwd)/flyway-8.4.2/flyway /usr/local/bin/flyway
      displayName: 'Install Flyway CLI'

    - script: |
        flyway -url=${FLYWAY_URL} -user=${FLYWAY_USER} -password=${FLYWAY_PASSWORD} -locations=filesystem:sql migrate
      displayName: 'Run Flyway Migrations'
      env:
        FLYWAY_URL: "jdbc:sqlserver://$(sqlServerName).database.windows.net:1433;databaseName=$(sqlDatabaseName)"
        FLYWAY_USER: "$(sqlAdminUser)"
        FLYWAY_PASSWORD: "$(sqlAdminPassword)"

- stage: DeployApp
  displayName: 'Deploy Application'
  dependsOn: DatabaseMigrations
  jobs:
  - job: Deploy
    displayName: 'Deploy to Azure App Service'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: 'Restore .NET Core Packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build .NET Core Project'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Publish .NET Core Project'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'

    - task: AzureCLI@2
      displayName: 'Create App Service Plan'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az appservice plan create --name $(appServicePlan) --resource-group $(resourceGroup) --location $(location) --sku B1
  
    - task: AzureCLI@2
      displayName: 'Create App Service'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az webapp create --name $(appServiceName) --plan $(appServicePlan) --resource-group $(resourceGroup)

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(appServiceName).zip'
        replaceExistingArchive: true

    - task: AzureWebApp@1
      displayName: 'Deploy to Azure Web App'
      inputs:
        azureSubscription: $(azureServiceConnection)
        appType: 'webApp'
        appName: '$(appServiceName)'
        package: '$(Build.ArtifactStagingDirectory)/$(appServiceName).zip'
