trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureServiceConnection: 'MyAzureServiceConnection' # Service connection to Azure
  resourceGroup: 'myResourceGroup'                   # Resource group name
  location: 'eastus'                                 # Location for the resources
  sqlServerName: 'mySqlServer'                       # SQL Server name
  sqlDatabaseName: 'myDatabase'                      # SQL Database name
  sqlAdminUser: 'sqlAdmin'                           # SQL Admin username
  sqlAdminPassword: '12345Pass!'                     # SQL Admin password (stored securely)

stages:
- stage: InfrastructureSetup
  displayName: 'Setup Infrastructure'
  jobs:
  - job: CreateResources
    displayName: 'Create Azure Resources'
    steps:
    - task: AzureCLI@2
      displayName: 'Create Resource Group'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # Create an Azure resource group
          az group create --name $(resourceGroup) --location $(location)
    
    - task: AzureCLI@2
      displayName: 'Create SQL Server'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # Create an Azure SQL Server
          az sql server create --name $(sqlServerName) --resource-group $(resourceGroup) --location $(location) --admin-user $(sqlAdminUser) --admin-password $(sqlAdminPassword)

    - task: AzureCLI@2
      displayName: 'Create SQL Database'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # Create an Azure SQL Database within the created server
          az sql db create --resource-group $(resourceGroup) --server $(sqlServerName) --name $(sqlDatabaseName) --service-objective S0

- stage: DatabaseMigrations
  displayName: 'Perform Database Migrations'
  dependsOn: InfrastructureSetup
  jobs:
  - job: MigrateDatabase
    displayName: 'Run Database Migrations'
    steps:
    - script: |
        wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/8.4.2/flyway-commandline-8.4.2-linux-x64.tar.gz | tar xvz
        sudo ln -s `pwd`/flyway-8.4.2/flyway /usr/local/bin
      displayName: 'Install Flyway CLI'

    - script: |
        flyway -url=jdbc:sqlserver://$(sqlServerName).database.windows.net:1433;databaseName=$(sqlDatabaseName) \
               -user=$(sqlAdminUser) \
               -password=$(sqlAdminPassword) \
               -locations=filesystem:sql \
               migrate
      displayName: 'Run Flyway Migrations'

- stage: DeployApp
  displayName: 'Deploy Application'
  dependsOn: DatabaseMigrations
  jobs:
  - job: Deploy
    displayName: 'Deploy to Azure App Service'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '5.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: 'Restore .NET Core Packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build .NET Core Project'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Publish .NET Core Project'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'

    - task: AzureWebApp@1
      displayName: 'Deploy to Azure Web App'
      inputs:
        azureSubscription: $(azureServiceConnection)
        appType: 'webApp'
        appName: 'myAppService'
        package: '$(Build.ArtifactStagingDirectory)/**/*.zip'
