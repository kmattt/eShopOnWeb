trigger:
  - main

resources:
  - repo: self

variables:
  dockerRegistryServiceConnection: 'myACR'
  imageRepository: 'redis'
  containerRegistry: 'crry6vhgxwxv45m.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'imagePullSCRT'

stages:
  - stage: Build
    displayName: Build and push stage
    jobs:
      - job: Build
        displayName: Build job
        pool:
          name: selfhostedpool
          demands:
          - agent.name -equals shubuntu
        steps:

          - checkout: self
            fetchDepth: 0

          - task: Docker@2
            displayName: Pull redis image
            inputs:
              command: pull
              arguments: redis
          
          - task: Docker@2
            displayName: Build and push image to ACR
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)
                latest

  - stage: Deploy
    displayName: Deploy to AKS
    jobs:
      - deployment: Deploy
        displayName: Deploy job
        pool:
          name: selfhostedpool
          demands:
          - agent.name -equals shubuntu
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubernetesManifest@0
                  displayName: Create imagePullSecret
                  inputs:
                    action: createSecret
                    secretName: $(imagePullSecret)
                    dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
                    
                - task: KubernetesManifest@0
                  displayName: Deploy to AKS
                  inputs:
                    action: 'deploy'
                    namespace: 'default'
                    manifests: |
                      apiVersion: apps/v1
                      kind: Deployment
                      metadata:
                        name: redis 
                      spec:
                        replicas: 1
                        selector:
                          matchLabels:
                            app: redis
                        template:
                          metadata:
                            labels:
                              app: redis
                          spec:
                            containers:
                            - name: redis
                              image: $(containerRegistry)/$(imageRepository):$(tag)
                              ports:
                              - containerPort: 6379
                            imagePullSecrets:
                            - name: $(imagePullSecret)
                    imagePullSecrets: '$(imagePullSecret)'